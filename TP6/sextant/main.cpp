#include <hal/multiboot.h>
#include <drivers/Ecran.h>
#include <Applications/SuperPong/SuperPong.h>
#include <drivers/PortSerie.h>

// TP2
#include <sextant/interruptions/idt.h>
#include <sextant/interruptions/irq.h>
#include <sextant/interruptions/handler/handler_tic.h>
#include <sextant/interruptions/handler/handler_clavier.h>
#include <drivers/timer.h>
#include <drivers/Clavier.h>
#include <Applications/Horloge/Horloge.h>
// TP3
#include <sextant/memoire/memoire.h>

// TP4
#include <sextant/ordonnancements/cpu_context.h>
#include <sextant/ordonnancements/preemptif/thread.h>
#include <sextant/types.h>
// TP5
#include <Applications/HelloThread/Hello.h>
#include <Applications/HelloThread/InfiniteHello.h>

#include <sextant/Synchronisation/Spinlock/Spinlock.h>

#include <Applications/ProdCons/Prod.h>
#include <Applications/ProdCons/Cons.h>

extern char __e_kernel,__b_kernel, __b_data, __e_data,  __b_stack, __e_load ;
int i;

extern vaddr_t bootstrap_stack_bottom; //Adresse de début de la pile d'exécution
extern size_t bootstrap_stack_size;//Taille de la pile d'exécution


struct cpu_state *ctxt_hello1;
struct cpu_state *ctxt_hello2;
struct cpu_state *ctxt_main;
vaddr_t hello1_stack, hello2_stack;
char tab1[1024];
char tab2[1024];

Ecran ecran;

static void thr_hello1 (char *str)
{
	//sched_set_waiting (thread_get_current(),true);
	ecran.afficherMot(str,BLANC);
	ecran.sautDeLigne();
	thread_yield();
	thread_exit();

}
static void thr_hello2 (char *str)
{
	//while (1) switch_to_next_thread(YIELD_MYSELF);
	ecran.afficherMot(str,BLANC);
	ecran.sautDeLigne();
	thread_exit();

}

void preemp1_thr_print_hello_world ()
{
	create_kernel_thread((kernel_thread_start_routine_t) thr_hello2, (void*) "Thread 2 schedule\n");
	create_kernel_thread((kernel_thread_start_routine_t) thr_hello1, (void*) "Thread 1 schedule\n");
}



extern "C" void Sextant_main(unsigned long magic, unsigned long addr){
	Ecran ecran;
	Timer timer;

	Hello monHello1(&ecran,1);
	Hello *monHello2;
	Hello *monHello3;
	InfiniteHello *monHello4;

	Semaphore sem1;
	Semaphore sem2;

	Spinlock spinlock;
	int spin=1;


	idt_setup();
	irq_setup();
	//Initialisation de la frequence de l'horloge

	timer.i8254_set_frequency(1000);
	irq_set_routine(IRQ_TIMER, ticTac);

	asm volatile("sti\n");//Autorise les interruptions

	irq_set_routine(IRQ_KEYBOARD, handler_clavier);

	multiboot_info_t* mbi;
	mbi = (multiboot_info_t*)addr;

	mem_setup(& __e_kernel,(mbi->mem_upper<<10) + (1<<20),&ecran);

	ecran.effacerEcran(NOIR);

	thread_subsystem_setup(bootstrap_stack_bottom,bootstrap_stack_size);
	sched_subsystem_setup();

	sem1.V();

	irq_set_routine(IRQ_TIMER, sched_clk);

	// Question 1

	ecran.afficherMot("Question 1:\n");
	preemp1_thr_print_hello_world();
	while (true);

	// Question 2
	char tab[1024];
	Cons conso(&sem1,tab,&ecran);
	Prod produ(&sem1,tab,&ecran);

	conso.start();
	produ.start();

	// Question 4

	// monHello2 = new Hello(&ecran,2,???,???,"Hlowrd\n");
	// monHello3 = new Hello(&ecran,3,???,???,"el ol\n");

	// monHello2->start();
	// monHello3->start();

	// Question 5

	/*
	monHello4 = new InfiniteHello(&ecran,4,&sem2,&sem1,"Tutu \n");

	monHello4->start();

	spinlock.Take(&spin);

	while(1) ecran.afficherMot("Toto  ",BLANC);

	spinlock.Release(&spin);
*/




		while (true);

}
