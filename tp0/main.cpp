/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, PHP, Ruby, 
C#, VB, Perl, Swift, Prolog, Javascript, Pascal, HTML, CSS, JS
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>
#include <cmath>

class Point 
{ 
    // Access specifier 
    private: 
    // Data Members 
    int x;
    int y;
    
    // Access specifier
    public:
    // Constructor
    Point() {
        x = 0;
        y = 0;
    }
    
    Point(int x, int y) {
        this->x = x;
        this->y = y;
    }
  
    // Member Functions() 
    int getX() {
        return this->x;
    }
    
    int getY() {
        return this->y;
    }
    
    void deplace(int dx, int dy) 
    { 
       this->x += dx;
       this->y += dy;
    } 
    
    void affiche() {
        printf("Le point est aux coordonnées suivantes : (%d, %d)\n", this->x, this->y);
    }
    
    void saisir(int x, int y) {
        this->x = x;
        this->y = y;
    }
    
    int distance(Point p) {
        return sqrt(pow(p.getX() - this->x, 2) + pow(p.getY() - this->y, 2));
    }
    
    Point milieu(Point p) {
        return Point((this->x + p.getX())/2, (this->y + p.getY())/2);
    }
};

class Segment
{
    private:
    Point i;
    Point j;
    
    public:
    Segment(Point i, Point j) {
        this->i = i;
        this->j = j;
    }
    
    Point getPointI() {
        return this->i;
    }
    
    Point getPointJ() {
        return this->j;
    }
    
    void deplace(int dx, int dy) 
    { 
       this->i.saisir(this->i.getX() + dx, this->i.getY() + dy);
       this->j.saisir(this->j.getX() + dx, this->j.getY() + dy);
    }
    
    void affiche() {
        printf("Point i: \n");
        this->i.affiche();
        printf("Point j: \n");
        this->j.affiche();
    }
    
    void saisir(int x, int y, int xDeux, int yDeux) {
        this->i.saisir(x, y);
        this->j.saisir(xDeux, yDeux);
    }
};

class SuperPoint : Point {
    public:
        SuperPoint(double x_, double y_): Point(x_, y_){

        }
        
        void affiche() {
            printf("Super !!!\n");
            Point::affiche();
        }
};

int main()
{
    // Point
    printf("Point un: \n");
    Point p(12, 14);
    p.affiche();
    
    printf("déplace de (2, 3): \n");
    p.deplace(2, 3);
    p.affiche();
    
    printf("saisir (5, 5): \n");
    p.saisir(5, 5);
    p.affiche();
    
    printf("Point deux: \n");
    Point pDeux(3, 2);
    printf("La distance entre les deux points est de: %d\n", p.distance(pDeux));
    
    printf("Point au milieu: \n");
    Point pMilieu = p.milieu(pDeux);
    pMilieu.affiche();
    
    // Segment
    printf("Segment: \n");
    Segment s(p, pDeux);
    s.affiche();
    
    printf("déplace de (2, 2): \n");
    s.deplace(2, 2);
    s.affiche();
    
    printf("saisir ((3, 3), (8, 8)): \n");
    s.saisir(3, 3, 8, 8);
    s.affiche();
    
    // SuperPoint
    printf("SuperPoint: \n");
    SuperPoint sp(2, 2);
    sp.affiche();
    
    return 0;
}
